{## Register Field in JS
{---------------------------------------------------------------------------------------}
    Let Selectize do its thing before registering with SelectPlus.js
{-------------------------------------------------------------------------------------##}
{% macro registerjs( namespace, fieldid ) %}
    {% js %}
        Craft.SelectPlusField
            .waitfor('select#{{"#{namespace|id}-#{fieldid}"}}.selectized')
            .then( ($select) => { Craft.SelectPlusField.setup( $select ) });
    {% endjs %}
{% endmacro %}
{##
{-------------------------------------------------------------------------------------##}



{## Tooltips & Help Modal Launchers
{-------------------------------------------------------------------------------------##}
{% macro inlinetips( field, options ) %}
    {% for opt in options %}
        {% set value  = opt.value ?? null %}
        {% set inline = opt.tooltips.inline ?? null %}
        {% if value and inline %}
            <template data-name='{{ "#{field.handle}__#{opt.value}__inline" | snake | lower }}'>
                <span class="tip">{{ raw( inline | markdown | widont ) }}</span>
            </template>
        {% endif %}
    {% endfor %}
{% endmacro %}



{## Help Doc Modal Templates
{-------------------------------------------------------------------------------------##}
{% macro helpmodals( field, options ) %}
    {% for opt in options %}
        {% if opt.tooltips.helptwig ?? null %}
            {% set helptitle = "Help for #{field.name} - #{opt.label}" %}
            <template
                data-title="{{ opt.tooltips.help ?? helptitle }}"
                data-helpurl="{{ opt.tooltips.helpurl ?? null }}"
                data-name='{{ "#{field.handle}__#{opt.value}__help" | snake | lower }}'
                data-virtuals="{{ opt.virtuals ?? null ? 'true' : 'false' }}"
            >{{ include( opt.tooltips.helptwig ) }}</template>
        {% endif %}
    {% endfor %}
{% endmacro %}



{## Virtual Field Modal Templates
{-------------------------------------------------------------------------------------##}
{% macro virtualmodals( field, options, json ) %}

    {## decode JSON string if necessary ##}
    {% set json = ( json is string ) ? json | json_decode : json %}

    {% import "_includes/forms" as forms %}
    {% for opt in options %}
        {% if opt.virtuals ?? null %}
            {% set inputtitle = "Settings for #{field.name} - #{opt.label}" %}
            <template
                data-name='{{ "#{field.handle}__#{opt.value}__virtuals" | snake | lower }}'
                data-title="{{ opt.tooltips.input ?? inputtitle }}"
                data-help="{{ opt.tooltips.helptwig ?? null ? 'true' : 'false' }}"
            >
                {% if opt.tooltips.inputabove ?? null %}<p class='intro'>{{ opt.tooltips.inputabove | markdown | retconChange( 'p', false ) }}</p>{% endif %}
                {% for virt in opt.virtuals %}
                    {% set currval = ( virt.name ?? null and json[virt.name] ?? null ) ? json[virt.name] : null %}
                    {% set virt = loop.first and loop.last ? virt | merge({ _only: true }) : virt %}
                    {{ _self.input( virt.type, virt, currval ) }}
                {% endfor %}
                {% if opt.tooltips.inputbelow ?? null %}<p class='outro'>{{ opt.tooltips.inputbelow | markdown | retconChange( 'p', false ) }}</p>{% endif %}
            </template>
        {% endif %}
    {% endfor %}
{% endmacro %}



{## Individual Virtual Input Fields
{-------------------------------------------------------------------------------------##}
{% macro input( fieldtype, settings, currval ) %}

    {% set field = {
        value        : currval ?? settings.value ?? settings.default ?? null,
        name         : settings.name         ?? null,
        label        : settings.label        ?? null | t('app'),
        min          : settings.min          ?? null,
        max          : settings.max          ?? null,
        step         : settings.step         ?? null,
        size         : settings.size         ?? null,
        options      : settings.options      ?? [],
        default      : settings.default      ?? null,
        maxlength    : settings.maxlength    ?? 255,
        fieldClass   : settings.fieldClass   ?? 'width-50',
        placeholder  : settings.placeholder  ?? null | t('app'),
        instructions : settings.instructions ?? null | t('app'),
    } %}


    {## If there's only a single field, make it full width in the modal ##}
    {% set field = ( settings._only ?? false )
            ? field | merge({ fieldClass: 'width-100' })
            : field %}


    {## Fix <lightswitch> value vs. on state ##}
    {% if fieldtype == 'lightswitch' %}
        {% set field = field | merge({
            value: settings.value ?? '1',
            on   : ( currval is null and field.default is not null ) ? field.default : currval,
        }) %}
    {% endif %}


    {## Normalize <select> options
    {---------------------------------------------------------------------------}
        <select> fields can have additional settings associated with each option,
        i.e. (besides 'value' and 'label'). These get stored on the <option>
        element as data attributes. The difference in JSON config is:
    {---------------------------------------------------------------------------}
        Simple:
        "options" : {
            "autolink": "Auto Link",
            "modal"   : "Lightbox",
            "download": "Download Image",
            "none"    : "No Click Action"
        }

        Complex:
        "options" : [{
            "value": "left",
            "label": "Left Aligned",
            "microlayout" : "zone1Top"
        },{
            "value": "middle",
            "label": "Middle Aligned",
            "microlayout" : "zone1Top__center"
        }]
    {-------------------------------------------------------------------------##}
    {% if ( ( field.options | first ) is iterable ) %}
        {% set field = field | merge({
            options: field.options|map(o => o.optgroup is defined ? o : {
                label: o.label,
                value: o.value,
                data : o | withoutKey(['value', 'label'])
            })})
        %}
    {% endif %}



    {## Render the field
    {-------------------------------------------------------------------------##}
    {% import "_includes/forms" as forms %}

    {% switch fieldtype %}
        {% case "lightswitch" %}
            {{ forms.lightswitchField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
                on          : field.on,
            }) }}
        {% case "select" %}
            {{ forms.selectField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                options     : field.options,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
            }) }}
        {% case "radiogroup" %}
            {{ forms.radioGroupField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                options     : field.options,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
            }) }}
        {% case "number" %}
            {{ forms.textField({
                type        : 'number',
                name        : field.name,
                label       : field.label,
                value       : field.value,
                size        : field.size ?? 8,
                min         : field.min,
                max         : field.max,
                step        : field.step,
                fieldClass  : field.fieldClass,
                placeholder : field.placeholder,
                instructions: field.instructions,
            }) }}
        {% case "date" %}
            {{ forms.dateField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
                data: {
                    name: field.name,
                }
            }) }}
        {% case "time" %}
            {{ forms.timeField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
                data: {
                    name: field.name,
                }
            }) }}
        {% case "money" %}
            {{ forms.moneyField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
                data: {
                    name: field.name,
                }
            }) }}
        {% case "icon" %}
            {{ forms.iconPickerField({
                name        : field.name,
                label       : field.label,
                value       : field.value,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
                data: {
                    name: field.name,
                }
            }) }}
        {% case "color" %}
            {% include "selectplus/fields/virtual.color" with {
                name        : field.name,
                label       : field.label,
                fieldClass  : field.fieldClass,
                instructions: field.instructions,
            } only %}
        {% case "hr" %}
            <div class="field hr"></div>
    {% default %}
        {{ forms.textField({
            name        : field.name,
            label       : field.label,
            size        : field.size,
            value       : field.value,
            maxlength   : field.maxlength,
            fieldClass  : field.fieldClass,
            placeholder : field.placeholder,
            instructions: field.instructions,
        }) }}
    {% endswitch %}
{% endmacro %}
