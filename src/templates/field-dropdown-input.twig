{## Don't bother generating the field if we can't load the config ##}
{% if options ??? null %}

<div
    class="selectplus"
    data-field="{{ field.handle }}"
>
    <div class="control">

        {## Use the native Craft library to create form elements ##}
        {% import "_includes/forms" as forms %}
        {% set uuid = "selectplus#{random()}" %}
        {{ forms.selectizeField({
            id     : uuid,
            name   : field.handle ~ "[value]",
            options: options,
            errors : deprecated ? ["Option no longer unavailable."|t] : false,
            class  : 'selectize',
            value  : value.value,
            selectizeOptions: {
                highlight: false,
            }
        }) }}

        {% js %}
            Craft.SelectPlusField.Fields
                .waitFor('select#{{"#{namespace|id}-#{uuid}"}}.selectized')
                .then( ($select) => {
                    Craft.SelectPlusField.Fields.setupField( $select )
                });
        {% endjs %}

        {## Gear Buttons (to load modal) ##}
        <div class="gears">
            {% set fieldname  = field.name ?? null %}
            {% set fieldname  = fieldname != '__blank__' ? "#{fieldname}: " : '' %}

            {% for opt in options %}
                {% if opt.virtuals ?? null %}
                    {% set optlabel   = opt.label ?? '' %}
                    {% set modaltitle = "#{fieldname}#{optlabel}" | default("Settings"|t) %}
                    {% set modaltitle = opt.tooltips.virtuals | default( modaltitle ) %}
                    <button
                        data-modal='{{ "#{field.handle}__#{opt.value}" | snake | lower }}__virtuals'
                        data-value="{{opt.value|e('html_attr')}}"
                        data-title="{{modaltitle|e('html_attr')}}"
                        class="btn btn-gear"
                        role="button"
                        type="button"></button>
                {% endif %}
            {% endfor %}
        </div>
    </div>

    <div class="tooltips">
        {% for opt in options %}
            {% set inline   = opt.tooltips.inline   ?? null %}
            {% set template = opt.tooltips.template ?? null %}
            {% set moreurl  = opt.tooltips.url      ?? null %}
            {% set trigger  = opt.tooltips.trigger  ?? 'Need Help?'|t %}

            <div data-value="{{opt.value|e('html_attr')}}" class="tip">
                {% if inline %}
                    <span>{{ raw( inline | widont ) }}</span>
                {% endif %}

                {% if template %}
                    {% set modaltitle = opt.tooltips.help ??? "#{opt.label ?? ''} #{'Help'|t}" %}
                    <button
                        data-modal='{{ "#{field.handle}__#{opt.value}" | snake | lower }}__help'
                        data-value="{{opt.value}}"
                        data-title="{{modaltitle}}"
                        data-template="{{template}}"
                        data-moreurl="{{moreurl}}"
                        class="btn btn-help"
                        role="button"
                        type="button">{{trigger}}</button>
                {% endif %}

                {% if moreurl and not template %}
                    {{ tag( 'a', {
                        href  : moreurl,
                        text  : trigger,
                        class : "btn-help",
                        target: "_blank",
                    } )}}
                {% endif %}
            </div>
        {% endfor %}
    </div>

    {## Virtual Inputs ##}
    {% for opt in options %}
        {{ _self.virtualinputs( field, opt, value.json ) }}
    {% endfor %}

    {## JSON encoded values of Virtual Inputs associated with the selected option ##}
    {# {{ forms.hidden({ id: "#{id}-json", name: "#{field.handle}[json]", value: value.json }) }} #}
    {{ forms.hidden({ name: "#{field.handle}[json]", value: value.json }) }}
</div>

{## Field Config Error ##}
{% else %}
    <p class="error">
        The JSON config for this field is missing or corrupt. Talk to your CMS admin.
    </p>
{% endif %}


{## Virtual Input Modal Contents ##}
{% macro virtualinputs( field, opt, values ) %}
    <template data-modal='{{ "#{field.handle}__#{opt.value}" | snake | lower }}__virtuals'>

        {% set values = values | json_decode %}

        {## intro text ##}
        {% if opt.tooltips.modal ?? null %}<p class='intro'>{{ opt.tooltips.modal | striptags }}</p>{% endif %}

        {## virtual inputs ##}
        {% for input in opt.virtuals ??? [] %}

            {## Only field? ##}
            {% set fieldClass = loop.first and loop.last ? 'width-100' : 'width-50' %}

            {## prep all possible values at once before individual field rendering ##}
            {% set input = {
                type         : input.type         ?? null,
                name         : input.name         ?? null,
                label        : input.label        ?? null | t('app'),
                value        : input.value        ?? null,
                min          : input.min          ?? null,
                max          : input.max          ?? null,
                step         : input.step         ?? null,
                size         : input.size         ?? null,
                options      : input.options      ?? [],
                maxlength    : input.maxlength    ?? 255,
                fieldClass   : input.fieldClass   ?? fieldClass,
                placeholder  : input.placeholder  ?? null | t('app'),
                instructions : input.instructions ?? null | t('app'),
            } %}


            {## Complex <select> options?
            {-------------------------------------------------------------------------##}
            {% if ( ( input.options | first ) is iterable ) %}
                {% set input = input | merge({
                    options: input.options|map(o => o.optgroup is defined ? o : {
                        label: o.label,
                        value: o.value,
                        data : o | withoutKey(['value', 'label'])
                    })})
                %}
            {% endif %}
            {##-------------------------------------------------------------------------}
                <select> fields can have additional settings associated with each option,
                i.e. (besides 'value' and 'label'). These get stored on the <option>
                element as data attributes. The difference in JSON config is:

                Simple:
            {---------------------------------------------------------------------------}
                "options" : {
                    "autolink": "Auto Link",
                    "modal"   : "Lightbox",
                    "download": "Download Image",
                    "none"    : "No Click Action"
                }

                Complex:
            {---------------------------------------------------------------------------}
                "options" : [{
                    "value": "left",
                    "label": "Left Aligned",
                    "microlayout" : "zone1Top"
                },{
                    "value": "middle",
                    "label": "Middle Aligned",
                    "microlayout" : "zone1Top__center"
                }]
            {-------------------------------------------------------------------------##}


            {## Render virtual fields based on type
            {---------------------------------------------------------------------------}
                Default any unknown types to text inputs.
            {-------------------------------------------------------------------------##}
            {% switch input.type %}
            {% case "lightswitch" %}
                {{ forms.lightswitchField({
                    name        : input.name,
                    label       : input.label,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "select" %}
                {{ forms.selectField({
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    options     : input.options,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "radiogroup" %}
                {{ forms.radioGroupField({
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    options     : input.options,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "number" %}
                {{ forms.textField({
                    type        : 'number',
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    size        : input.size ?? 8,
                    min         : input.min,
                    max         : input.max,
                    step        : input.step,
                    fieldClass  : input.fieldClass,
                    placeholder : input.placeholder,
                    instructions: input.instructions,
                }) }}
            {% case "date" %}
                {{ forms.dateField({
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "time" %}
                {{ forms.timeField({
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "money" %}
                {{ forms.moneyField({
                    name        : input.name,
                    label       : input.label,
                    value       : input.value,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "icon" %}
                {{ forms.iconPickerField({
                    name        : input.name,
                    label       : input.label,
                    value       : values[input.name] ??? input.value,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                }) }}
            {% case "color" %}
                {% include "selectplus/forms/color" with {
                    name        : input.name,
                    label       : input.label,
                    fieldClass  : input.fieldClass,
                    instructions: input.instructions,
                } only %}
            {% case "hr" %}
                <div class="field hr"></div>
            {% default %}
                {{ forms.textField({
                    name        : input.name,
                    label       : input.label,
                    size        : input.size,
                    value       : input.value,
                    maxlength   : input.maxlength,
                    fieldClass  : input.fieldClass,
                    placeholder : input.placeholder,
                    instructions: input.instructions,
                }) }}
            {% endswitch %}
        {% endfor %}
    </template>
{% endmacro %}