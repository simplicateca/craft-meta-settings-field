Craft.SelectPlusField = typeof Craft.SelectPlusField === 'undefined' ? {} : Craft.SelectPlusField;
document.addEventListener('DOMContentLoaded', () => {
    Craft.SelectPlusField.Fields.init();
});



/**
 * SelectPlusField - Documentation Modal
 */
Craft.SelectPlusField.DocumentationModal = Garnish.Modal.extend({

    init( modalContent = {} ) {

        Object.keys(modalContent).forEach( k => {
            if ( modalContent[k] === null || modalContent[k] == "" )
                delete modalContent[k]
        });

        const content = Object.assign({}, {
            title  : 'Documentation',
            moreurl: null,
            html   : null,
        }, modalContent )

        this.$form = $('<form class="modal fitted selectplus" method="post" accept-charset="UTF-8"/>').appendTo(Garnish.$bod);

        $('<div class="header"><h1>' + content.title + '</h1></header>').appendTo(this.$form);

        if( content.html ) {
            this.$body = $('<div class="body">' + content.html + '</div>').appendTo(this.$form);
        }

        const $footer = $('<div class="footer"/>').appendTo(this.$form);

        const $mainBtnGroup = $('<div class="buttons right"/>').appendTo($footer);

        if( content.moreurl ) {
            this.$moreBtn = $('<a href="' + content.moreurl + '" target="_blank" class="btn submit">' + Craft.t('selectplus', content.more) + '</a>').appendTo($mainBtnGroup);
            this.addListener(this.$moreBtn, 'click', 'onFadeOut');
        }

        this.$cancelBtn   = $('<input type="button" class="btn" value="' + Craft.t('app', 'Close') + '"/>').appendTo($mainBtnGroup);
        this.addListener(this.$cancelBtn, 'click', 'onFadeOut');

        Craft.initUiElements(this.$form);

        this.base(this.$form);
    },

    onFadeOut() {
        this.$form.remove();
        this.$shade.remove();
    }
});


/**virtualDefaults
 * SelectPlusField - Settings Modal
 */
Craft.SelectPlusField.InputModal = Garnish.Modal.extend({

    field: null,

    init( settings = {} ) {

        content = Object.assign({}, {
            title : 'Field Settings',
            html  : null,
        }, settings )

        this.field = settings.field ?? null

        // the modal element is actually the <form> tag
        this.$form = $('<form class="modal fitted selectplus fields" accept-charset="UTF-8"/>').appendTo(Garnish.$bod);

        // modal header
        // todo: add a close button here
        $('<div class="header"><h1>' + content.title + '</h1></header>').appendTo(this.$form);

        // modal body (input fields)
        const $body = $( '<div class="body"></div>').appendTo(this.$form);
        $(content.html).appendTo($body);

        // bottom close "message/button"
        const $footerclose = $('<input type="button" class="close" value="' + Craft.t('app', 'Changes automatically saved on close.') + '"/>')
        this.addListener( $footerclose, 'click', 'onFadeOut');

        // modal footer
        const $footer = $('<div class="footer"/>').appendTo(this.$form);
        $footerclose.appendTo($footer);

        // set starting values
        this.setStartingValues( settings.values ?? {} );

        // open the modal
        Craft.initUiElements(this.$form);
        this.base(this.$form);

        // trigger any JS that needs to be run after the modal is open
        setTimeout(() => { this.triggerJS(); }, 25 );
    },


    triggerJS() {

        // technically speaking, this is generated by twig, but since we're doing everything
        // inside javascript already, we have to call the functions manually here.

        // loop through each of the fields in the form
        const $virtuals = this.$form[0].querySelectorAll( 'div.body > div.field[data-attribute]' );
        for( var i = 0; i < $virtuals.length; i++ ) {

            const attribute = $virtuals[i].dataset.attribute ?? null;

            // icon picker fields
            // -> craftcms/vendor/craftcms/cms/src/templates/_includes/forms/iconPicker.twig
            if( attribute.startsWith('iconpicker') ) {
                const iconfield = $virtuals[i].id.replace(/-field$/, '');
                new Craft.IconPicker( '#' + iconfield )
            }

            // color picker fields
            // -> craftcms/vendor/simplicateca/selectplus/src/templates/forms/color.twig
            if( attribute.startsWith('color') ) {
                const colorfield = $virtuals[i].id.replace(/-field$/, '-container');
                new Craft.ColorInput('#' + colorfield, {
                    presets: [],
                });
                // console.log('ColorInput: #' + colorfield  )
            }

            // money fields
            // -> craftcms/vendor/craftcms/cms/src/templates/_includes/forms/money.twig
            if( attribute.startsWith('money') ) {
                new Craft.Money( 'fields-' + attribute );

                // console.log('Money: #fields-' + attribute)
            }

            // time fields
            // -> craftcms/vendor/craftcms/cms/src/templates/_includes/forms/time.twig
            if( attribute.startsWith('time') ) {
                $('#fields-' + attribute + '-time').timepicker($.extend({

                }, Craft.timepickerOptions ));

                // console.log('timepicker: #fields-' + attribute + '-time')
            }

            // datepick fields
            // -> craftcms/vendor/craftcms/cms/src/templates/_includes/forms/date.twig
            if( attribute.startsWith('date') ) {
                $('#fields-' + attribute + '-date').datepicker($.extend({
                    defaultDate: new Date()
                }, Craft.datepickerOptions ));

                // console.log('datepicker: #fields-' + attribute + '-date')
            }
        }

    },


    setStartingValues( values ) {
        for (const key in values) {
            const input = this.$form[0].querySelector(`[name$="[${key}]"]`);
            if (input) {
                if( input.tagName === 'SELECT' ) {
                    const optionExists = Array.from(input.options).some(option => option.value === values[key]);
                    if (optionExists) {
                        input.value = values[key];
                    }
                } else {
                    input.value = values[key];
                }
            }
        }
    },

    
    onFadeOut() {
        Craft.SelectPlusField.Fields.saveVirtuals( this.$form, this.field )
        this.$form.remove()
        this.$shade.remove()
    }
});



/**
 * SelectPlusField - Primary JS
 */
Craft.SelectPlusField.Fields = {
    init() {
        //this.monitorSelects()
        this.monitorButtons()
    },

    // waits for selectize to do its thing
    waitFor( selector ) {
        return new Promise(resolve => {
            if (document.querySelector(selector)) {
                return resolve(document.querySelector(selector));
            }

            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    resolve(document.querySelector(selector));
                }
            });

            // If you get "parameter 1 is not of type 'Node'" error, see https://stackoverflow.com/a/77855838/492336
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    },


    // setup a selectplus field the first time we see one
    setupField( $field ) {
        const selectplus = $field ? $field.closest('.selectplus') : null
        if( selectplus ) {
            // toggle any tooltips + modal buttons
            this.toggleButtons( selectplus, $field.selectize.getValue() )

            // watch for changes
            new MutationObserver(function(mutations) {
                if( mutations[0].target ) Craft.SelectPlusField.Fields.changeSelect( mutations[0].target )
            }).observe( $field, { childList: true } )

            // this fixes a weird UI glitch where .. the first selectize in a slide out panel would start open.
            // as best as i can tell, this was only happening if the `Title` field is disabled for the entry
            // type being edited. I *see* the issue on a fresh install of Craft 5, but it was self correcting
            // by the time the panel fully openned. This is my attempt to replicate the autocorrect, but it's
            // also not the end of the world if it doesn't work. It doesn't break anything, it's just annoying
            // const $select = selectplus.querySelector( 'select.selectized' );
            if( $field ) {
                setTimeout(() => { $field.selectize.blur(); }, 25 );
            }
        }
    },


    jsonFromModal( field ) {
        const selectplus = field ? field.closest('.selectplus') : null
        const json = selectplus.querySelector('input[type="hidden"][name$="[json]"]')
        const gear = selectplus.querySelector('.gears .btn-gear[data-value="'+field.value+'"]')
        if( json && gear ) {
            const template = document.querySelector( 'template[data-modal="'+gear.dataset.modal+'"]' )
            if( template ) {
                const modal = template.content.cloneNode(true);

                $form = $('<form class="modal fitted selectplus fields" accept-charset="UTF-8"/>');
                $(modal).appendTo($form);
                const $inputs = $form[0] ? $form[0].querySelectorAll('input, select, textarea') : null

                // Extract field names
                const fieldNames = Array.from($inputs).map(element => {
                    return element.getAttribute('name');
                }).map(str => {
                    const matches = str.match(/\[([^[]+)\]$/);
                    return matches ? matches[1] : null;
                }).filter(fieldName => fieldName !== null);


                const oldjson = JSON.parse( json.value );
                const current = {};
                Object.keys(oldjson).forEach(key => {
                    if( fieldNames.includes(key) ) {
                        current[key] = oldjson[key];
                    }
                });


                for( const key in current ) {
                    const input = $form[0].querySelector(`[name$="[${key}]"]`);
                    if( input ) {
                        if( input.tagName === 'SELECT' ) {
                            const optionExists = Array.from(input.options).some(option => option.value === current[key]);
                            if (optionExists) {
                                input.value = current[key];
                            }
                        } else {
                            input.value = current[key];
                        }
                    }
                }

                const values = Object.assign({},
                    this.virtualDefaults( $form[0] ),
                    current,
                )

                json.value = JSON.stringify( values )
            }
        }
    },



    // when the value of the selectize field changes
    changeSelect( field ) {
        if( field.value ) {
            this.jsonFromModal(field)
            const selectplus = field ? field.closest('.selectplus') : null
            if( selectplus ) {
                this.toggleButtons( field.closest(".selectplus"), field.value  )
            }
        }
    },



    monitorButtons() {
        // jQuery is <fart> but it since selectize is already based on it, this does
        // make setting click listeners a little easier.
        (function($) {
            $(document).on('keypress click', '.selectplus .btn-gear', function(e) {
                e.preventDefault();
                Craft.SelectPlusField.Fields.buttonSettings( e.target )
            });

            $(document).on('keypress click', '.selectplus .btn-help', function(e) {
                e.preventDefault();
                Craft.SelectPlusField.Fields.buttonTooltip( e.target )
            });
        })(jQuery);
    },


    toggleButtons( selectplus, value ) {
        // toggle visibility of inline tooltips & modal buttons for each select <option>
        const gears = selectplus.querySelectorAll( '.gears' );
        if( gears && gears[0] && gears[0].children ) {
            Array.from(gears[0].children).forEach((btn) => {
                btn.style.display = ( btn.dataset.value == value ) ? 'flex' : 'none';
            });
        }

        const tooltips = selectplus.querySelectorAll( '.tooltips' );
        if( tooltips && tooltips[0] && tooltips[0].children ) {
            Array.from(tooltips[0].children).forEach((tip) => {
                tip.style.display = ( tip.dataset.value == value ) ? 'flex' : 'none';
            });
        }
    },


    buttonTooltip( link ) {
        const modal    = link.dataset.modal ?? null
        const title    = link.dataset.title ?? 'Documentation'
        const moreurl  = link.dataset.moreurl ?? null
        const template = link.dataset.template ?? null
        // const template = document.querySelector( 'template[data-modal="'+modal+'"]' )

        if( template ) {
            new Craft.SelectPlusField.DocumentationModal({
                title  : title,
                moreurl: moreurl,
                html   : template,
            })
        }
    },


    buttonSettings( link ) {
        const selectplus = link ? link.closest('.selectplus') :  null
        if( selectplus ) {
            const modal    = link.dataset.modal ?? null
            const title    = link.dataset.title ?? 'Settings'
            const template = document.querySelector( 'template[data-modal="'+modal+'"]' )

            if( template ) {
                let json = selectplus.querySelector('input[type="hidden"][name$="[json]"]')
                new Craft.SelectPlusField.InputModal({
                    field : selectplus,
                    title : title,
                    values: JSON.parse( json.value ?? '' ),
                    html  : template.content.cloneNode(true),
                })
            }
        }
    },


    virtualDefaults( fields ) {
        $form = $('<form class="modal fitted selectplus fields" accept-charset="UTF-8"/>');
        $(fields).appendTo($form);
        const $inputs = $form[0] ? $form[0].querySelectorAll('input, select, textarea') : null
        return this.serialize( $inputs )
    },


    saveVirtuals( $form, $field ) {
        const $json = $field ? $field.querySelector('input[type="hidden"][name$="[json]"]') : null
        if( $json ) {
            const $inputs = $form[0] ? $form[0].querySelectorAll('input, select, textarea') : null
            $json.value = JSON.stringify( this.serialize( $inputs ) )
        }
    },


    serialize( fields ) {
        let values = {};
        if( !fields || !fields.length ) { return values; }

        fields.forEach( (input) => {
            if( input.name ) {
                const match = input.name.match(/\[([^[\]]+)\]$/)
                if( match ) {
                    if( input.type === 'checkbox' || input.type === 'radiogroup' ) {
                        values[match[1]] = input.checked ? input.value : values[match[1]];
                    } else if( input.tagName === 'SELECT' ) {
                        const option = Object.assign({}, input.options[input.selectedIndex].dataset ?? null )
                        values[match[1]] = input.value;
                        values = Object.assign({}, values, option);
                    } else {
                        values[match[1]] = input.value;
                    }
                }
            }
        } );

        return values;
    }
}
